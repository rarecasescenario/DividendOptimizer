buildscript {
   	repositories {
   		mavenCentral()
	}
}

plugins {
    id 'java-library'
    id 'net.nemerosa.versioning' version '2.8.2'
    id 'org.springframework.boot' version '3.0.6'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'build'
description = 'Creating a war file'
sourceCompatibility = 19
targetCompatibility = 19

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    //options.compileArgs = ['-Xlint:unchecked']
}


dependencies {
	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.1'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.1'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.17.1'
// https://mvnrepository.com/artifact/com.google.code.gson/gson
implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'

//	implementation group: 'org.apache.logging.log4j', name: 'log4j-web', version: '2.17.1'
//	implementation fileTree(dir: 'lib', include: '*.jar')
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

tasks.named('test') {
	useJUnitPlatform()
}

jar {
	archiveFileName = "divoptimizer.jar"
	destinationDirectory = file("${project.rootDir}/Optimizer/build/libs")
	manifest {
		attributes(
			'Build-By'			: System.properties['user.name'],
			'Build-Timestamp'	: new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(new Date()),
			'Created-By'		: "Gradle ${gradle.gradleVersion}",
			'Build-Jdk'			: "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
			'Build-OS'			: "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
			'Main-Class'        : "org.tutorials.PlainSpringMain",
			'Implementation-Vendor' : "RareCase Corp",
			'Implementation-Title' : "Dividend Optimizer",
			'Version' : "${archiveVersion}",
			'Specification-Title' : "${archiveFileName}",
			//'Class-Path': configurations.runtimeClasspath.files.collect {it.getName()}.join(' ')
		)
	}
	from('resources') {
		include 'log4j2-pswb.xml'
	}
	//duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	//duplicatesStrategy = DuplicatesStrategy.INCLUDE
}